package com.epologee.application {	import flash.utils.getQualifiedClassName;
	import com.epologee.development.logging.LogInlet;	import com.epologee.development.logging.LogOutletTrazzle15;	import com.epologee.development.logging.error;	import com.epologee.development.logging.info;	import com.epologee.time.TimeDelay;	import com.epologee.util.stage.StageDetector;	import com.epologee.util.stage.StageSettings;	import com.epologee.util.stage.IInitializable;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.system.Capabilities;	import flash.utils.getDefinitionByName;	/**	 * @author Eric-Paul Lecluse | epocom (c) 2009	 */		public class AbstractFactory extends MovieClip implements IInitializable {		public static var delay : int = 500;		//		private var _preloader : AbstractPreloader;		private var _applicationClass : String;
		private var _log : Boolean;
		/**		 * Extend the BasePreloaderFactory and call super constructor with the appropriate parameters.		 * @param inPreloader your custom preloader class that will create the list of preloader elements		 * @param inApplicationClass the string value of the path to your application class (controller).		 */		public function AbstractFactory(inPreloader : AbstractPreloader, inApplicationClass : String, inAlignMode : String = "no scale, top left alignment", inLog : Boolean = true) {			_log = inLog;						StageSettings.apply(this, inAlignMode);						_preloader = inPreloader;			_applicationClass = inApplicationClass;						if (!_preloader || !_applicationClass) throw new Error("Extend the BasePreloaderFactory and call super constructor with the appropriate parameters.");			_preloader.addEventListener(Event.COMPLETE, handlePreloadComplete);						StageDetector.initializeOnce(this);		}		public function initialize() : void {			if (_log) {				LogInlet.addLogger(new LogOutletTrazzle15(stage, _applicationClass));			}						info("Preloading " + loaderInfo.url + " on Flash version: " + Capabilities.version + (Capabilities.isDebugger ? " (DEBUG)" : " (regular)"));			_preloader.timeline = this;			_preloader.prepare();			new TimeDelay(_preloader.start, delay);		}		protected function startApplication() : void {			try {				var ApplicationClass : Class = Class(getDefinitionByName(_applicationClass));				var app : IApplication = new ApplicationClass();				addChild(app as DisplayObject);									try {					app.startApplication();					_preloader.finish();				} catch (ei : Error) {					error("startApplication() failed - " + ei.message);				}			} catch (e : Error) {				error("startApplication: Error [" + e.errorID + "] constructing " + ApplicationClass);			}		}		private function handlePreloadComplete(event : Event) : void {			_preloader.removeEventListener(Event.COMPLETE, handlePreloadComplete);			nextFrame();						new TimeDelay(startApplication, delay);		}
	}}